/*******************************************************************************
** Program:       Rise Project 4
** Author:        David Vega
** Date:          6/3/19
** Description:   This is a base class that has four pointers used to connect
**                to other spaces above, below, to the left and to the right
*******************************************************************************/

#include "Space.hpp"
/*******************************************************************************
**  This function validates that digits and special characters are not used.
*******************************************************************************/
Space::Space()
{
   top = nullptr;
   right = nullptr;
   left = nullptr;
   bottom = nullptr;
   fighter = nullptr;
   locName = "nowhere";

}
/*******************************************************************************
**  sets the top pointer
*******************************************************************************/
void Space::setTop(Space *&top)
{
   this->top = top;
}
/*******************************************************************************
**  sets the location name
*******************************************************************************/
void Space::setLocName(std::string locName)
{
   this->locName = locName;
}
/*******************************************************************************
**  sets the right pointer
*******************************************************************************/
void Space::setRight(Space *&right)
{
   this->right = right;
}
/*******************************************************************************
**  sets the left pointer
*******************************************************************************/
void Space::setLeft(Space *&left)
{
   this->left = left;
}
/*******************************************************************************
**  sets the bottom pointer
*******************************************************************************/
void Space::setBottom(Space *&bottom)
{
   this->bottom = bottom;
}
/*******************************************************************************
**  returns the location name
*******************************************************************************/
std::string Space::getLocationName()
{
   return locName;
}
/*******************************************************************************
**  returns the top pointer
*******************************************************************************/
Space *Space::getTop()
{
   return top;
}
/*******************************************************************************
**  returns the right pointer
*******************************************************************************/
Space *Space::getRight()
{
   return right;
}
/*******************************************************************************
**  returns the left pointer
*******************************************************************************/
Space *Space::getLeft()
{
   return left;
}
/*******************************************************************************
**  returns the bottom pointer
*******************************************************************************/
Space *Space::getBottom()
{
   return bottom;
}
/*******************************************************************************
**  adds k number of keys to the key value
*******************************************************************************/
void Space::setKey(int k)
{
   key += k;
}
/*******************************************************************************
**  sets the visa value for a space
*******************************************************************************/
void Space::setVisa(int visa)
{
   this->visa = visa;
}
/*******************************************************************************
**  returns the key value for a space
*******************************************************************************/
int Space::getKey()
{
   return key;
}
/*******************************************************************************
**  returns the visa value for a space
*******************************************************************************/
int Space::getVisa()
{
   return visa;
}
/*******************************************************************************
**  default destructor
*******************************************************************************/
Space::~Space() {}